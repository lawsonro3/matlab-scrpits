% This program interpolates between balde sections generated by Harp_Opt to create a
% "blade skeleton". The xy coords that define the skeleton are saved in text files.
% These data files can be used in a SolidWorks macro to create a fully 3D blade geometry.
% A solid works macro file that should automatically create the blade geometry is also
% created.
%
% Input: 
%   Blade shape, airfoild coordinates. Airfoil coords must start and end at
%   the same point
% Output: 
%   Coordinates the define airfoil skeleton and a Solidworks macro for creating
%   the airfoil geometry
%
% @author:Michael Lawson
% @data:June 20, 2012
clc; clear all; close all;

%% Plot intermediate airfoils, y=yes, n=no
plotBlade = 'y';

%% How many airfoil points should each macro file contain
macroLength = 20;

%% Load airfoil data and define the blade geometry
%airfoilCoordsFile = '/Users/mlawson/Dropbox/NREL/Blade Design for SAFL Test/Harp-Opt Design/Output_Files/SAFL_Test_Blade_v6_SmallRtChord_bigTipChord_saflRedesign/Airfoil_Data/Normalized_AF_Coordinates.mat';
%dataFile = '~/Dropbox/NREL/Blade Design for SAFL Test/Harp-Opt Design/Output_Files/SAFL_Test_Blade_v6_SmallRtChord_bigTipChord_saflRedesign/SAFL_Test_Blade_v6_SmallRtChord_bigTipChord_saflRedesign_Output.dat';
%saveDir = '~/Dropbox/NREL/Blade Design for SAFL Test/Harp-Opt Design/Output_Files/SAFL_Test_Blade_v6_SmallRtChord_bigTipChord_saflRedesign/profiles/';
airfoilCoordsFile = '/Users/mlawson/Dropbox/NREL/Desktop/rick/airofilProfiles/used/Normalized_AF_Coordinates.mat';
dataFile = '/Users/mlawson/Dropbox/NREL/Desktop/rick/bladeGeom.dat';
saveDir = '/Users/mlawson/Dropbox/NREL/Desktop/rick/airofilProfiles/used/profiles/';

[r_R,r,preTwist,chord,perc_t,t,pitchAxis] =...
    interpolateBladeData(dataFile,100,'pchip');
perc_t = round(perc_t*10)/10; % round the thickness to the nearest 0.1 %
preTwist_rad = preTwist*pi/180;

load(airfoilCoordsFile);
airfoilCoords_t= cell2mat(Normalized_AF_Coordinates(:,2));
airfoilCoords_t = round(airfoilCoords_t*10)/10;

%% Find the indicies of the airfoil data
for i = 1:length(perc_t);
    ind = find(airfoilCoords_t==perc_t(i));
    airfoils{i} = Normalized_AF_Coordinates{ind,1};
end

% for i = 1:length(chord)
%     airfoils{i}(end+1,:) = airfoils{i}(1,:)
% end

%% Scale the initial airfoil for each section along the chord length
for i = 1:length(chord)
    airfoils{i} = airfoils{i}.*chord(i);
end

%% Adjust the airfoils so they are alligned along the pitch axis
for i = 1:length(chord)
    temp = cell2mat(airfoils(i));
    airfoils{i} = [temp(:,1) - pitchAxis(i)*chord(i) temp(:,2)];
end

%% Transform the airfoil points for the twisted airfoils
for i = 1:length(preTwist)
    temp = cell2mat(airfoils(i));
    airfoils{i} = [temp(:,1)*cos(preTwist(i)*pi/180)-temp(:,2)*sin(preTwist(i)*pi/180), temp(:,1)*sin(preTwist(i)*pi/180)+temp(:,2)*cos(preTwist(i)*pi/180)];
end

%% Calculate the airfoil volume
for i = 1:length(chord)
    area(i) = polyarea(airfoils{i}(:,1),airfoils{i}(:,2));
end
for i = 1:length(chord)-1
    avgArea(i) = (area(i+1) + area(i))/2;
    centroilR(i) = (r(i+1) + r(i))/2;
    dr(i) = r(i+1) - r(i);
    vol(i) = avgArea(i)*dr(i);
end
totalVol = sum(vol);

%% Plot the blade shape
if plotBlade == 'y';
    fig=figure; hold on; axis equal;
    for i = 1:length(chord)
        temp = cell2mat(airfoils(i));
        plot3(-temp(:,1),r(i)*ones(length(temp(:,:)),1),temp(:,2));
    end
    axis([-max(chord) max(chord) 0 max(r)+0.05*max(r) -max(chord) max(chord)]); view(3)
    figure; 
    subplot(2,3,1)
    plot(r_R,preTwist)
    title('pre twist')
    subplot(2,3,2)
    plot(r_R,t)
    title('thickness')
    subplot(2,3,3)
    plot(r_R,chord)
    title('thickness')
    subplot(2,3,4)
    plot(r_R,pitchAxis)
    title('pitch axis')
    subplot(2,3,5)
    plot(r_R,perc_t)
    title('percent thickness')
end

%% Export the airfoil points
% for i = 1:length(chord)
%     temp = cell2mat(airfoils(i));
%     saveName = [saveDir 'airfoil_' num2str(i) '.sldcrv'];
%     dlmwrite(saveName,[temp(:,:) r(i)*ones(length(temp(:,:)),1)],'\t')
% end

%% Write the data in a Macro that can be read by SolidWorks
%     for j = 1:macroLength:length(chord)
%     fid = fopen([saveDir 'solidWorksMacro_' num2str(j) '-' num2str(j+macroLength-1) '.swp'],'w');
%     fprintf(fid,'%s\n','Dim swApp As Object');
%     fprintf(fid,'%s\n','Dim Part As Object');
%     fprintf(fid,'%s\n','Dim boolstatus As Boolean');
%     fprintf(fid,'%s\n','Dim longstatus As Long, longwarnings As Long');
%     fprintf(fid,'%s\n','Sub main()');
%     fprintf(fid,'%s\n%s\n','Set swApp = _','Application.SldWorks');
%     fprintf(fid,'%s\n','Set Part = swApp.ActiveDoc');
%     fprintf(fid,'%s\n','Dim myModelView As Object');
%     fprintf(fid,'%s\n','Set myModelView = Part.ActiveView');
%     fprintf(fid,'%s\n','myModelView.FrameState = swWindowState_e.swWindowMaximized');
% 
%     for i = j:j+macroLength-1
%         if i<=length(chord)
%             temp = cell2mat(airfoils(i));
%             fprintf(fid,'%s\n','Part.InsertCurveFileBegin');
%             for j = 1:length(temp)
%                 fprintf(fid,'%s','boolstatus = Part.InsertCurveFilePoint(');
%                 fprintf(fid,'%f, %f, %f)\n',temp(j,1),temp(j,2),r(i));
%             end
%             fprintf(fid,'%s\n','boolstatus = Part.InsertCurveFileEnd()');
%         end
%     end
%     fprintf(fid,'%s','End Sub');
%     end